name: LLM RAG â€” Ingest, Ask, Publish

on:
  workflow_dispatch:
    inputs:
      question:
        description: "Question to ask over the ingested docs"
        required: true
        default: "What does the documentation say?"
      top_k:
        description: "Top-k passages"
        required: true
        default: "5"
  schedule:
    - cron: "0 14 * * *"  # 9:00 AM America/Chicago

permissions:
  contents: write

jobs:
  run-rag:
    runs-on: ubuntu-latest
    env:
      STORE_DIR: store
      DATA_DIR: data
      QUESTION: ${{ github.event.inputs.question || 'What does the documentation say?' }}
      TOP_K: ${{ github.event.inputs.top_k || '5' }}
      USE_OPENAI: auto  # "auto" tries OpenAI then falls back; set "never" to always use fallback

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest

      # Configure OpenAI (optional, will no-op if the secret isn't set)
      - name: Configure OpenAI (optional)
        env:
          OPENAI_API_KEY_SECRET: ${{ secrets.OPENAI_API_KEY }}
        run: |
          if [ -n "${OPENAI_API_KEY_SECRET}" ]; then
            echo "OPENAI_API_KEY=${OPENAI_API_KEY_SECRET}" >> "$GITHUB_ENV"
            echo "Using OpenAI if available (will fall back on error)."
          else
            echo "No OPENAI_API_KEY secret; using deterministic fallback."
          fi

      - name: Ensure data exists
        run: |
          mkdir -p "${DATA_DIR}"
          if [ -z "$(ls -A "${DATA_DIR}" 2>/dev/null)" ]; then
            echo "Contoso builds secure Microsoft 365 solutions. External sharing is restricted." > "${DATA_DIR}/seed.txt"
          fi
          echo "== data/ =="
          ls -la "${DATA_DIR}"

      - name: Ingest to store/
        run: |
          python rag.py ingest --data "${DATA_DIR}" --store "${STORE_DIR}"

      - name: Run tests
        run: |
          python -m pytest -q

      - name: Ask question and write answers.json
        run: |
          python batch.py --store "${STORE_DIR}" --q "${QUESTION}" --k "${TOP_K}" --out answers.json
          echo "== answers.json =="
          cat answers.json

      - name: Upload answers artifact
        uses: actions/upload-artifact@v4
        with:
          name: rag-answers
          path: answers.json

      # Publish a simple static dashboard at repo root (for GitHub Pages)
      - name: Publish static dashboard to root
        run: |
          # Copy only the static assets. answers.json is already at root.
          cp -f pages.index.html index.html
          cp -f pages.app.js app.js
          cp -f pages.style.css style.css
          echo "== root listing =="
          ls -la

      - name: Commit & push (root site + answers.json)
        if: github.ref == 'refs/heads/main'
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add -A
          git commit -m "RAG: ingest + tests + answer + publish dashboard [skip ci]" || echo "Nothing to commit"
          git push
